# dirty imports messing with path
import pathlib, sys
sys.path.insert(0, pathlib.Path().absolute())
print(pathlib.Path().absolute())

from algorithm import algorithm, least_squares
import sys

# input info for test
def input_test(test):
    with open("tests/input/test" + str(test) + ".txt", "r") as file:
        lines = file.readlines()
        n_g = int(lines[0])
        P_min = list(map(float, lines[1].split()))
        P_max = list(map(float, lines[2].split()))
        A = list(map(float, lines[3].split()))
        B = list(map(float, lines[4].split()))
        C = list(map(float, lines[5].split()))
        p_load = float(lines[6])
        p_loss = float(lines[7])
        
        return (P_min, P_max, p_load, p_loss, A, B, C)

if __name__ == "__main__":
    preset_tests = True
    random_tests = False
    
    active_set = True
    least_sq = False

    for arg in sys.argv[1:]:
        if arg == "-random" or arg == "-r":
            random_tests = True
            preset_tests = False
        if arg == "-ls" or arg == "-squares" or arg == "-sp":
            least_sq = True
            active_set = False
        if arg == "-preset" or arg == "-p":
            preset_tests = True
            random_tests = False
        if arg == "-active" or arg == "-a":
            active_set = True
            least_sq = False

    if preset_tests:   
        P_min = [100, 90, 30]
        P_max = [550, 450, 230]
        p_load = 980
        p_loss = 20
        A = [0.001632, 0.00241, 0.00514]
        B = [6.852, 8.05, 8.82]
        C = [405, 293, 81]

        if active_set:
            (P, iter_count, total_price, total_power, total_power_loss) = algorithm.run_algorithm(
                P_min, P_max, p_load, p_loss, A, B, C
            )   
        if least_sq:
            (P, iter_count, total_price, total_power, total_power_loss) = least_squares.run_algorithm(
                P_min, P_max, p_load, p_loss, A, B, C
            ) 

        print("P =", P)
        print("Iterations:", iter_count)
        print("Total cost =", total_price)
        print("Total power =", total_power)
        print("Power loss =", total_power_loss)
        print("P_sum = ", sum(P))
    
    if random_tests:
        test_num = 10
        for test in range(test_num):
            P_min, P_max, p_load, p_loss, A, B, C = input_test(test)

            if active_set:
                (P, iter_count, total_price, total_power, total_power_loss) = algorithm.run_algorithm(
                    P_min, P_max, p_load, p_loss, A, B, C
                )   
                pre = "active_set/result"
                ext = "_act"

            if least_sq:
                (P, iter_count, total_price, total_power, total_power_loss) = least_squares.run_algorithm(
                    P_min, P_max, p_load, p_loss, A, B, C
                ) 
                pre = "scipy_minimize/result"
                ext = "_sp"

            with open("tests/output/" + pre + str(test) + ext + ".txt", "w") as file:
                file.write("********************************\n")
                file.write("Generated by test_algorithm.py\n")
                file.write("********************************\n")
                file.write("\n")

                file.write(" ".join(list(map(str,P))) + "\n")
                file.write("Iterations: " + str(iter_count) + "\n")
                file.write("Cost: " + str(total_price) + "\n")
                file.write("Total power: " + str(total_power) + "\n")
                file.write("P_sum: " + str(sum(P)) + "\n")
                file.write("abs(P_sum - P_tot): " + str(abs(sum(P)-total_power)) + "\n")

            print("P_sum = ", sum(P))
            print("P_tot = ", total_power)
            print("Iterations: " + str(iter_count))
            print("Cost: " + str(total_price))    
            print("")                                                         